{"version":3,"file":"index-Wh-3HJyP.js","sources":["../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js","../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js","../../node_modules/@reown/appkit-ui/dist/esm/src/composites/wui-token-button/styles.js","../../node_modules/@reown/appkit-ui/dist/esm/src/composites/wui-token-button/index.js"],"sourcesContent":["// -- Types --------------------------------------------- //\nimport { NumberUtil } from '@reown/appkit-common';\n// -- Util ---------------------------------------- //\nexport const SwapCalculationUtil = {\n    getGasPriceInEther(gas, gasPrice) {\n        const totalGasCostInWei = gasPrice * gas;\n        const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;\n        return totalGasCostInEther;\n    },\n    getGasPriceInUSD(networkPrice, gas, gasPrice) {\n        const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);\n        const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);\n        const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);\n        return gasCostInUSD.toNumber();\n    },\n    getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {\n        const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);\n        const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);\n        const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);\n        return priceImpact.toNumber();\n    },\n    getMaxSlippage(slippage, toTokenAmount) {\n        const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);\n        const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);\n        return maxSlippageAmount.toNumber();\n    },\n    getProviderFee(sourceTokenAmount, feePercentage = 0.0085) {\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);\n        return providerFee.toString();\n    },\n    isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {\n        const gasPrice = gasPriceInUSD || '0';\n        if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {\n            return true;\n        }\n        return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);\n    },\n    isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {\n        const sourceTokenBalance = balance?.find(token => token.address === sourceTokenAddress)\n            ?.quantity?.numeric;\n        const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || '0').lt(sourceTokenAmount);\n        return isInSufficientBalance;\n    },\n    getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {\n        if (sourceTokenAmount === '0') {\n            return '0';\n        }\n        if (!sourceToken || !toToken) {\n            return '0';\n        }\n        const sourceTokenDecimals = sourceToken.decimals;\n        const sourceTokenPriceInUSD = sourceTokenPrice;\n        const toTokenDecimals = toToken.decimals;\n        const toTokenPriceInUSD = toTokenPrice;\n        if (toTokenPriceInUSD <= 0) {\n            return '0';\n        }\n        // Calculate the provider fee (0.85% of the source token amount)\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(0.0085);\n        // Adjust the source token amount by subtracting the provider fee\n        const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);\n        // Proceed with conversion using the adjusted source token amount\n        const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));\n        const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);\n        const decimalDifference = sourceTokenDecimals - toTokenDecimals;\n        const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit\n            .times(priceRatio)\n            .div(NumberUtil.bigNumber(10).pow(decimalDifference));\n        const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));\n        const amount = toTokenAmount.toFixed(toTokenDecimals).toString();\n        return amount;\n    }\n};\n//# sourceMappingURL=SwapCalculationUtil.js.map","import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { NumberUtil } from '@reown/appkit-common';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { W3mFrameRpcConstants } from '@reown/appkit-wallet/utils';\nimport { BalanceUtil } from '../utils/BalanceUtil.js';\nimport { getActiveNetworkTokenAddress, getPreferredAccountType } from '../utils/ChainControllerUtil.js';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { SwapApiUtil } from '../utils/SwapApiUtil.js';\nimport { SwapCalculationUtil } from '../utils/SwapCalculationUtil.js';\nimport { withErrorBoundary } from '../utils/withErrorBoundary.js';\nimport { AccountController } from './AccountController.js';\nimport { AlertController } from './AlertController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { RouterController } from './RouterController.js';\nimport { SnackController } from './SnackController.js';\n// -- Constants ---------------------------------------- //\nexport const INITIAL_GAS_LIMIT = 150000;\nexport const TO_AMOUNT_DECIMALS = 6;\nclass TransactionError extends Error {\n    constructor(message, shortMessage) {\n        super(message);\n        this.name = 'TransactionError';\n        this.shortMessage = shortMessage;\n    }\n}\n// -- State --------------------------------------------- //\nconst initialState = {\n    // Loading states\n    initializing: false,\n    initialized: false,\n    loadingPrices: false,\n    loadingQuote: false,\n    loadingApprovalTransaction: false,\n    loadingBuildTransaction: false,\n    loadingTransaction: false,\n    // Error states\n    fetchError: false,\n    // Approval & Swap transaction states\n    approvalTransaction: undefined,\n    swapTransaction: undefined,\n    transactionError: undefined,\n    // Input values\n    sourceToken: undefined,\n    sourceTokenAmount: '',\n    sourceTokenPriceInUSD: 0,\n    toToken: undefined,\n    toTokenAmount: '',\n    toTokenPriceInUSD: 0,\n    networkPrice: '0',\n    networkBalanceInUSD: '0',\n    networkTokenSymbol: '',\n    inputError: undefined,\n    // Request values\n    slippage: ConstantsUtil.CONVERT_SLIPPAGE_TOLERANCE,\n    // Tokens\n    tokens: undefined,\n    popularTokens: undefined,\n    suggestedTokens: undefined,\n    foundTokens: undefined,\n    myTokensWithBalance: undefined,\n    tokensPriceMap: {},\n    // Calculations\n    gasFee: '0',\n    gasPriceInUSD: 0,\n    priceImpact: undefined,\n    maxSlippage: undefined,\n    providerFee: undefined\n};\nconst state = proxy(initialState);\n// -- Controller ---------------------------------------- //\nconst controller = {\n    state,\n    subscribe(callback) {\n        return sub(state, () => callback(state));\n    },\n    subscribeKey(key, callback) {\n        return subKey(state, key, callback);\n    },\n    getParams() {\n        const caipAddress = ChainController.state.activeCaipAddress;\n        const address = CoreHelperUtil.getPlainAddress(caipAddress);\n        const networkAddress = getActiveNetworkTokenAddress();\n        const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);\n        if (!address) {\n            throw new Error('No address found to swap the tokens from.');\n        }\n        const invalidToToken = !state.toToken?.address || !state.toToken?.decimals;\n        const invalidSourceToken = !state.sourceToken?.address ||\n            !state.sourceToken?.decimals ||\n            !NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        const invalidSourceTokenAmount = !state.sourceTokenAmount;\n        return {\n            networkAddress,\n            fromAddress: address,\n            fromCaipAddress: caipAddress,\n            sourceTokenAddress: state.sourceToken?.address,\n            toTokenAddress: state.toToken?.address,\n            toTokenAmount: state.toTokenAmount,\n            toTokenDecimals: state.toToken?.decimals,\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenDecimals: state.sourceToken?.decimals,\n            invalidToToken,\n            invalidSourceToken,\n            invalidSourceTokenAmount,\n            availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,\n            isAuthConnector: connectorId === CommonConstantsUtil.CONNECTOR_ID.AUTH\n        };\n    },\n    setSourceToken(sourceToken) {\n        if (!sourceToken) {\n            state.sourceToken = sourceToken;\n            state.sourceTokenAmount = '';\n            state.sourceTokenPriceInUSD = 0;\n            return;\n        }\n        state.sourceToken = sourceToken;\n        SwapController.setTokenPrice(sourceToken.address, 'sourceToken');\n    },\n    setSourceTokenAmount(amount) {\n        state.sourceTokenAmount = amount;\n    },\n    setToToken(toToken) {\n        if (!toToken) {\n            state.toToken = toToken;\n            state.toTokenAmount = '';\n            state.toTokenPriceInUSD = 0;\n            return;\n        }\n        state.toToken = toToken;\n        SwapController.setTokenPrice(toToken.address, 'toToken');\n    },\n    setToTokenAmount(amount) {\n        state.toTokenAmount = amount\n            ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS)\n            : '';\n    },\n    async setTokenPrice(address, target) {\n        let price = state.tokensPriceMap[address] || 0;\n        if (!price) {\n            state.loadingPrices = true;\n            price = await SwapController.getAddressPrice(address);\n        }\n        if (target === 'sourceToken') {\n            state.sourceTokenPriceInUSD = price;\n        }\n        else if (target === 'toToken') {\n            state.toTokenPriceInUSD = price;\n        }\n        if (state.loadingPrices) {\n            state.loadingPrices = false;\n        }\n        if (SwapController.getParams().availableToSwap) {\n            SwapController.swapTokens();\n        }\n    },\n    switchTokens() {\n        if (state.initializing || !state.initialized) {\n            return;\n        }\n        const newSourceToken = state.toToken ? { ...state.toToken } : undefined;\n        const newToToken = state.sourceToken ? { ...state.sourceToken } : undefined;\n        const newSourceTokenAmount = newSourceToken && state.toTokenAmount === '' ? '1' : state.toTokenAmount;\n        SwapController.setSourceToken(newSourceToken);\n        SwapController.setToToken(newToToken);\n        SwapController.setSourceTokenAmount(newSourceTokenAmount);\n        SwapController.setToTokenAmount('');\n        SwapController.swapTokens();\n    },\n    resetState() {\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n        state.tokensPriceMap = initialState.tokensPriceMap;\n        state.initialized = initialState.initialized;\n        state.sourceToken = initialState.sourceToken;\n        state.sourceTokenAmount = initialState.sourceTokenAmount;\n        state.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;\n        state.toToken = initialState.toToken;\n        state.toTokenAmount = initialState.toTokenAmount;\n        state.toTokenPriceInUSD = initialState.toTokenPriceInUSD;\n        state.networkPrice = initialState.networkPrice;\n        state.networkTokenSymbol = initialState.networkTokenSymbol;\n        state.networkBalanceInUSD = initialState.networkBalanceInUSD;\n        state.inputError = initialState.inputError;\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n    },\n    resetValues() {\n        const { networkAddress } = SwapController.getParams();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        SwapController.setSourceToken(networkToken);\n        SwapController.setToToken(undefined);\n    },\n    getApprovalLoadingState() {\n        return state.loadingApprovalTransaction;\n    },\n    clearError() {\n        state.transactionError = undefined;\n    },\n    async initializeState() {\n        if (state.initializing) {\n            return;\n        }\n        state.initializing = true;\n        if (!state.initialized) {\n            try {\n                await SwapController.fetchTokens();\n                state.initialized = true;\n            }\n            catch (error) {\n                state.initialized = false;\n                SnackController.showError('Failed to initialize swap');\n                RouterController.goBack();\n            }\n        }\n        state.initializing = false;\n    },\n    async fetchTokens() {\n        const { networkAddress } = SwapController.getParams();\n        await SwapController.getTokenList();\n        await SwapController.getNetworkTokenPrice();\n        await SwapController.getMyTokensWithBalance();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        if (networkToken) {\n            state.networkTokenSymbol = networkToken.symbol;\n            SwapController.setSourceToken(networkToken);\n            SwapController.setSourceTokenAmount('1');\n        }\n    },\n    async getTokenList() {\n        const tokens = await SwapApiUtil.getTokenList();\n        state.tokens = tokens;\n        state.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {\n            if (aTokenInfo.symbol < bTokenInfo.symbol) {\n                return -1;\n            }\n            if (aTokenInfo.symbol > bTokenInfo.symbol) {\n                return 1;\n            }\n            return 0;\n        });\n        state.suggestedTokens = tokens.filter(token => {\n            if (ConstantsUtil.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {\n                return true;\n            }\n            return false;\n        }, {});\n    },\n    async getAddressPrice(address) {\n        const existPrice = state.tokensPriceMap[address];\n        if (existPrice) {\n            return existPrice;\n        }\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [address]\n        });\n        const fungibles = response?.fungibles || [];\n        const allTokens = [...(state.tokens || []), ...(state.myTokensWithBalance || [])];\n        const symbol = allTokens?.find(token => token.address === address)?.symbol;\n        const price = fungibles.find(p => p.symbol.toLowerCase() === symbol?.toLowerCase())?.price || 0;\n        const priceAsFloat = parseFloat(price.toString());\n        state.tokensPriceMap[address] = priceAsFloat;\n        return priceAsFloat;\n    },\n    async getNetworkTokenPrice() {\n        const { networkAddress } = SwapController.getParams();\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [networkAddress]\n        }).catch(() => {\n            SnackController.showError('Failed to fetch network token price');\n            return { fungibles: [] };\n        });\n        const token = response.fungibles?.[0];\n        const price = token?.price.toString() || '0';\n        state.tokensPriceMap[networkAddress] = parseFloat(price);\n        state.networkTokenSymbol = token?.symbol || '';\n        state.networkPrice = price;\n    },\n    async getMyTokensWithBalance(forceUpdate) {\n        const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);\n        const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);\n        if (!swapBalances) {\n            return;\n        }\n        await SwapController.getInitialGasPrice();\n        SwapController.setBalances(swapBalances);\n    },\n    setBalances(balances) {\n        const { networkAddress } = SwapController.getParams();\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!caipNetwork) {\n            return;\n        }\n        const networkToken = balances.find(token => token.address === networkAddress);\n        balances.forEach(token => {\n            state.tokensPriceMap[token.address] = token.price || 0;\n        });\n        state.myTokensWithBalance = balances.filter(token => token.address.startsWith(caipNetwork.caipNetworkId));\n        state.networkBalanceInUSD = networkToken\n            ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString()\n            : '0';\n    },\n    async getInitialGasPrice() {\n        const res = await SwapApiUtil.fetchGasPrice();\n        if (!res) {\n            return { gasPrice: null, gasPriceInUSD: null };\n        }\n        switch (ChainController.state?.activeCaipNetwork?.chainNamespace) {\n            case CommonConstantsUtil.CHAIN.SOLANA:\n                state.gasFee = res.standard ?? '0';\n                state.gasPriceInUSD = NumberUtil.multiply(res.standard, state.networkPrice)\n                    .div(1e9)\n                    .toNumber();\n                return {\n                    gasPrice: BigInt(state.gasFee),\n                    gasPriceInUSD: Number(state.gasPriceInUSD)\n                };\n            case CommonConstantsUtil.CHAIN.EVM:\n            default:\n                // eslint-disable-next-line no-case-declarations\n                const value = res.standard ?? '0';\n                // eslint-disable-next-line no-case-declarations\n                const gasFee = BigInt(value);\n                // eslint-disable-next-line no-case-declarations\n                const gasLimit = BigInt(INITIAL_GAS_LIMIT);\n                // eslint-disable-next-line no-case-declarations\n                const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gasLimit, gasFee);\n                state.gasFee = value;\n                state.gasPriceInUSD = gasPrice;\n                return { gasPrice: gasFee, gasPriceInUSD: gasPrice };\n        }\n    },\n    // -- Swap -------------------------------------- //\n    async swapTokens() {\n        const address = AccountController.state.address;\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        const haveSourceTokenAmount = NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        if (!haveSourceTokenAmount) {\n            SwapController.setToTokenAmount('');\n        }\n        if (!toToken || !sourceToken || state.loadingPrices || !haveSourceTokenAmount) {\n            return;\n        }\n        state.loadingQuote = true;\n        const amountDecimal = NumberUtil.bigNumber(state.sourceTokenAmount)\n            .times(10 ** sourceToken.decimals)\n            .round(0);\n        try {\n            const quoteResponse = await BlockchainApiController.fetchSwapQuote({\n                userAddress: address,\n                from: sourceToken.address,\n                to: toToken.address,\n                gasPrice: state.gasFee,\n                amount: amountDecimal.toString()\n            });\n            state.loadingQuote = false;\n            const quoteToAmount = quoteResponse?.quotes?.[0]?.toAmount;\n            if (!quoteToAmount) {\n                AlertController.open({\n                    shortMessage: 'Incorrect amount',\n                    longMessage: 'Please enter a valid amount'\n                }, 'error');\n                return;\n            }\n            const toTokenAmount = NumberUtil.bigNumber(quoteToAmount)\n                .div(10 ** toToken.decimals)\n                .toString();\n            SwapController.setToTokenAmount(toTokenAmount);\n            const isInsufficientToken = SwapController.hasInsufficientToken(state.sourceTokenAmount, sourceToken.address);\n            if (isInsufficientToken) {\n                state.inputError = 'Insufficient balance';\n            }\n            else {\n                state.inputError = undefined;\n                SwapController.setTransactionDetails();\n            }\n        }\n        catch (error) {\n            state.loadingQuote = false;\n            state.inputError = 'Insufficient balance';\n        }\n    },\n    // -- Create Transactions -------------------------------------- //\n    async getTransaction() {\n        const { fromCaipAddress, availableToSwap } = SwapController.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state.loadingQuote) {\n            return undefined;\n        }\n        try {\n            state.loadingBuildTransaction = true;\n            const hasAllowance = await SwapApiUtil.fetchSwapAllowance({\n                userAddress: fromCaipAddress,\n                tokenAddress: sourceToken.address,\n                sourceTokenAmount: state.sourceTokenAmount,\n                sourceTokenDecimals: sourceToken.decimals\n            });\n            let transaction = undefined;\n            if (hasAllowance) {\n                transaction = await SwapController.createSwapTransaction();\n            }\n            else {\n                transaction = await SwapController.createAllowanceTransaction();\n            }\n            state.loadingBuildTransaction = false;\n            state.fetchError = false;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to check allowance');\n            state.loadingBuildTransaction = false;\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createAllowanceTransaction() {\n        const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();\n        if (!fromCaipAddress || !toTokenAddress) {\n            return undefined;\n        }\n        if (!sourceTokenAddress) {\n            throw new Error('createAllowanceTransaction - No source token address found.');\n        }\n        try {\n            const response = await BlockchainApiController.generateApproveCalldata({\n                from: sourceTokenAddress,\n                to: toTokenAddress,\n                userAddress: fromCaipAddress\n            });\n            const address = CoreHelperUtil.getPlainAddress(response.tx.from);\n            if (!address) {\n                throw new Error('SwapController:createAllowanceTransaction - address is required');\n            }\n            const transaction = {\n                data: response.tx.data,\n                to: address,\n                gasPrice: BigInt(response.tx.eip155.gasPrice),\n                value: BigInt(response.tx.value),\n                toAmount: state.toTokenAmount\n            };\n            state.swapTransaction = undefined;\n            state.approvalTransaction = {\n                data: transaction.data,\n                to: transaction.to,\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n            return {\n                data: transaction.data,\n                to: transaction.to,\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create approval transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createSwapTransaction() {\n        const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {\n            return undefined;\n        }\n        const amount = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)?.toString();\n        try {\n            const response = await BlockchainApiController.generateSwapCalldata({\n                userAddress: fromCaipAddress,\n                from: sourceToken.address,\n                to: toToken.address,\n                amount: amount,\n                disableEstimate: true\n            });\n            const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;\n            const gas = BigInt(response.tx.eip155.gas);\n            const gasPrice = BigInt(response.tx.eip155.gasPrice);\n            const address = CoreHelperUtil.getPlainAddress(response.tx.to);\n            if (!address) {\n                throw new Error('SwapController:createSwapTransaction - address is required');\n            }\n            const transaction = {\n                data: response.tx.data,\n                to: address,\n                gas,\n                gasPrice,\n                value: isSourceTokenIsNetworkToken ? BigInt(amount ?? '0') : BigInt('0'),\n                toAmount: state.toTokenAmount\n            };\n            state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gas, gasPrice);\n            state.approvalTransaction = undefined;\n            state.swapTransaction = transaction;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    onEmbeddedWalletApprovalSuccess() {\n        SnackController.showLoading('Approve limit increase in your wallet');\n        RouterController.replace('SwapPreview');\n    },\n    // -- Send Transactions --------------------------------- //\n    async sendTransactionForApproval(data) {\n        const { fromAddress, isAuthConnector } = SwapController.getParams();\n        state.loadingApprovalTransaction = true;\n        const approveLimitMessage = `Approve limit increase in your wallet`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                onSuccess: SwapController.onEmbeddedWalletApprovalSuccess\n            });\n        }\n        else {\n            SnackController.showLoading(approveLimitMessage);\n        }\n        try {\n            await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: CommonConstantsUtil.CHAIN.EVM\n            });\n            await SwapController.swapTokens();\n            await SwapController.getTransaction();\n            state.approvalTransaction = undefined;\n            state.loadingApprovalTransaction = false;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.shortMessage;\n            state.loadingApprovalTransaction = false;\n            SnackController.showError(error?.shortMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_APPROVAL_ERROR',\n                properties: {\n                    message: error?.shortMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType(CommonConstantsUtil.CHAIN.EVM) ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n        }\n    },\n    async sendTransactionForSwap(data) {\n        if (!data) {\n            return undefined;\n        }\n        const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();\n        state.loadingTransaction = true;\n        const snackbarPendingMessage = `Swapping ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        const snackbarSuccessMessage = `Swapped ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                onSuccess() {\n                    RouterController.replace('Account');\n                    SnackController.showLoading(snackbarPendingMessage);\n                    controller.resetState();\n                }\n            });\n        }\n        else {\n            SnackController.showLoading('Confirm transaction in your wallet');\n        }\n        try {\n            const forceUpdateAddresses = [state.sourceToken?.address, state.toToken?.address].join(',');\n            const transactionHash = await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: CommonConstantsUtil.CHAIN.EVM\n            });\n            state.loadingTransaction = false;\n            SnackController.showSuccess(snackbarSuccessMessage);\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_SUCCESS',\n                properties: {\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType(CommonConstantsUtil.CHAIN.EVM) ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            controller.resetState();\n            if (!isAuthConnector) {\n                RouterController.replace('Account');\n            }\n            controller.getMyTokensWithBalance(forceUpdateAddresses);\n            return transactionHash;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.shortMessage;\n            state.loadingTransaction = false;\n            SnackController.showError(error?.shortMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_ERROR',\n                properties: {\n                    message: error?.shortMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType(CommonConstantsUtil.CHAIN.EVM) ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            return undefined;\n        }\n    },\n    // -- Checks -------------------------------------------- //\n    hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {\n        const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state.myTokensWithBalance);\n        return isInsufficientSourceTokenForSwap;\n    },\n    // -- Calculations -------------------------------------- //\n    setTransactionDetails() {\n        const { toTokenAddress, toTokenDecimals } = SwapController.getParams();\n        if (!toTokenAddress || !toTokenDecimals) {\n            return;\n        }\n        state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, BigInt(state.gasFee), BigInt(INITIAL_GAS_LIMIT));\n        state.priceImpact = SwapCalculationUtil.getPriceImpact({\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenPriceInUSD: state.sourceTokenPriceInUSD,\n            toTokenPriceInUSD: state.toTokenPriceInUSD,\n            toTokenAmount: state.toTokenAmount\n        });\n        state.maxSlippage = SwapCalculationUtil.getMaxSlippage(state.slippage, state.toTokenAmount);\n        state.providerFee = SwapCalculationUtil.getProviderFee(state.sourceTokenAmount);\n    }\n};\n// Export the controller wrapped with our error boundary\nexport const SwapController = withErrorBoundary(controller);\n//# sourceMappingURL=SwapController.js.map","import { css } from 'lit';\nexport default css `\n  :host {\n    display: block;\n  }\n\n  :host > button {\n    gap: var(--wui-spacing-xxs);\n    padding: var(--wui-spacing-xs);\n    padding-right: var(--wui-spacing-1xs);\n    height: 40px;\n    border-radius: var(--wui-border-radius-l);\n    background: var(--wui-color-gray-glass-002);\n    border-width: 0px;\n    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-002);\n  }\n\n  :host > button wui-image {\n    width: 24px;\n    height: 24px;\n    border-radius: var(--wui-border-radius-s);\n    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-010);\n  }\n`;\n//# sourceMappingURL=styles.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport '../../components/wui-image/index.js';\nimport '../../components/wui-text/index.js';\nimport { elementStyles, resetStyles } from '../../utils/ThemeUtil.js';\nimport { customElement } from '../../utils/WebComponentsUtil.js';\nimport '../wui-icon-box/index.js';\nimport styles from './styles.js';\nlet WuiTokenButton = class WuiTokenButton extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.text = '';\n    }\n    render() {\n        return html `\n      <button>\n        ${this.tokenTemplate()}\n        <wui-text variant=\"paragraph-600\" color=\"fg-100\">${this.text}</wui-text>\n      </button>\n    `;\n    }\n    tokenTemplate() {\n        if (this.imageSrc) {\n            return html `<wui-image src=${this.imageSrc}></wui-image>`;\n        }\n        return html `\n      <wui-icon-box\n        size=\"sm\"\n        iconColor=\"fg-200\"\n        backgroundColor=\"fg-300\"\n        icon=\"networkPlaceholder\"\n      ></wui-icon-box>\n    `;\n    }\n};\nWuiTokenButton.styles = [resetStyles, elementStyles, styles];\n__decorate([\n    property()\n], WuiTokenButton.prototype, \"imageSrc\", void 0);\n__decorate([\n    property()\n], WuiTokenButton.prototype, \"text\", void 0);\nWuiTokenButton = __decorate([\n    customElement('wui-token-button')\n], WuiTokenButton);\nexport { WuiTokenButton };\n//# sourceMappingURL=index.js.map"],"names":["SwapCalculationUtil","gas","gasPrice","totalGasCostInWei","networkPrice","totalGasCostInEther","NumberUtil","sourceTokenAmount","sourceTokenPriceInUSD","toTokenPriceInUSD","toTokenAmount","inputValue","outputValue","slippage","slippageToleranceDecimal","feePercentage","networkBalanceInUSD","gasPriceInUSD","sourceTokenAddress","balance","sourceTokenBalance","_b","_a","token","sourceToken","toToken","sourceTokenPrice","toTokenPrice","sourceTokenDecimals","toTokenDecimals","providerFee","sourceAmountInSmallestUnit","priceRatio","decimalDifference","INITIAL_GAS_LIMIT","TO_AMOUNT_DECIMALS","initialState","ConstantsUtil","state","proxy","controller","callback","sub","key","subKey","caipAddress","ChainController","address","CoreHelperUtil","networkAddress","getActiveNetworkTokenAddress","connectorId","ConnectorController","invalidToToken","invalidSourceToken","_c","_d","invalidSourceTokenAmount","_e","_f","_g","_h","CommonConstantsUtil","SwapController","amount","target","price","newSourceToken","newToToken","newSourceTokenAmount","networkToken","SnackController","RouterController","tokens","SwapApiUtil","aTokenInfo","bTokenInfo","existPrice","response","BlockchainApiController","fungibles","allTokens","symbol","p","priceAsFloat","forceUpdate","balances","BalanceUtil","swapBalances","caipNetwork","res","value","gasFee","gasLimit","AccountController","haveSourceTokenAmount","amountDecimal","quoteResponse","quoteToAmount","AlertController","fromCaipAddress","availableToSwap","hasAllowance","transaction","toTokenAddress","ConnectionController","isSourceTokenIsNetworkToken","data","fromAddress","isAuthConnector","err","error","EventsController","getPreferredAccountType","W3mFrameRpcConstants","snackbarPendingMessage","snackbarSuccessMessage","forceUpdateAddresses","transactionHash","_i","_j","_k","_l","withErrorBoundary","styles","css","__decorate","decorators","desc","c","d","i","WuiTokenButton","LitElement","html","resetStyles","elementStyles","property","customElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}