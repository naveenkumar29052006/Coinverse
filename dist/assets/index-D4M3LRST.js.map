{"version":3,"file":"index-D4M3LRST.js","sources":["../../node_modules/@reown/appkit-pay/dist/esm/src/types/errors.js","../../node_modules/@reown/appkit-pay/dist/esm/src/utils/ConstantsUtil.js","../../node_modules/@reown/appkit-pay/dist/esm/src/utils/ApiUtil.js","../../node_modules/@reown/appkit-pay/dist/esm/src/utils/AssetUtil.js","../../node_modules/@reown/appkit-pay/dist/esm/src/utils/PaymentUtil.js","../../node_modules/@reown/appkit-pay/dist/esm/src/controllers/PayController.js","../../node_modules/@reown/appkit-pay/dist/esm/src/ui/w3m-pay-view/styles.js","../../node_modules/@reown/appkit-pay/dist/esm/src/ui/w3m-pay-view/index.js","../../node_modules/@reown/appkit-pay/dist/esm/src/ui/w3m-pay-loading-view/styles.js","../../node_modules/@reown/appkit-pay/dist/esm/src/ui/w3m-pay-loading-view/index.js","../../node_modules/@reown/appkit-pay/dist/esm/src/client.js","../../node_modules/@reown/appkit-pay/dist/esm/src/types/assets.js"],"sourcesContent":["export const AppKitPayErrorCodes = {\n    INVALID_PAYMENT_CONFIG: 'INVALID_PAYMENT_CONFIG',\n    INVALID_RECIPIENT: 'INVALID_RECIPIENT',\n    INVALID_ASSET: 'INVALID_ASSET',\n    INVALID_AMOUNT: 'INVALID_AMOUNT',\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n    UNABLE_TO_INITIATE_PAYMENT: 'UNABLE_TO_INITIATE_PAYMENT',\n    INVALID_CHAIN_NAMESPACE: 'INVALID_CHAIN_NAMESPACE',\n    GENERIC_PAYMENT_ERROR: 'GENERIC_PAYMENT_ERROR',\n    UNABLE_TO_GET_EXCHANGES: 'UNABLE_TO_GET_EXCHANGES',\n    ASSET_NOT_SUPPORTED: 'ASSET_NOT_SUPPORTED',\n    UNABLE_TO_GET_PAY_URL: 'UNABLE_TO_GET_PAY_URL',\n    UNABLE_TO_GET_BUY_STATUS: 'UNABLE_TO_GET_BUY_STATUS'\n};\nexport const AppKitPayErrorMessages = {\n    [AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG]: 'Invalid payment configuration',\n    [AppKitPayErrorCodes.INVALID_RECIPIENT]: 'Invalid recipient address',\n    [AppKitPayErrorCodes.INVALID_ASSET]: 'Invalid asset specified',\n    [AppKitPayErrorCodes.INVALID_AMOUNT]: 'Invalid payment amount',\n    [AppKitPayErrorCodes.UNKNOWN_ERROR]: 'Unknown payment error occurred',\n    [AppKitPayErrorCodes.UNABLE_TO_INITIATE_PAYMENT]: 'Unable to initiate payment',\n    [AppKitPayErrorCodes.INVALID_CHAIN_NAMESPACE]: 'Invalid chain namespace',\n    [AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR]: 'Unable to process payment',\n    [AppKitPayErrorCodes.UNABLE_TO_GET_EXCHANGES]: 'Unable to get exchanges',\n    [AppKitPayErrorCodes.ASSET_NOT_SUPPORTED]: 'Asset not supported by the selected exchange',\n    [AppKitPayErrorCodes.UNABLE_TO_GET_PAY_URL]: 'Unable to get payment URL',\n    [AppKitPayErrorCodes.UNABLE_TO_GET_BUY_STATUS]: 'Unable to get buy status'\n};\nexport class AppKitPayError extends Error {\n    get message() {\n        return AppKitPayErrorMessages[this.code];\n    }\n    constructor(code, details) {\n        super(AppKitPayErrorMessages[code]);\n        this.name = 'AppKitPayError';\n        this.code = code;\n        this.details = details;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppKitPayError);\n        }\n    }\n}\nexport function createAppKitPayError(code, details) {\n    const errorCode = code || AppKitPayErrorCodes.UNKNOWN_ERROR;\n    return new AppKitPayError(errorCode, details);\n}\n//# sourceMappingURL=errors.js.map","export const API_URL = 'https://rpc.walletconnect.org/v1/json-rpc';\n//# sourceMappingURL=ConstantsUtil.js.map","import { OptionsController } from '@reown/appkit-controllers';\nimport { API_URL } from './ConstantsUtil.js';\nclass JsonRpcError extends Error {\n}\nexport function getApiUrl() {\n    const projectId = OptionsController.getSnapshot().projectId;\n    return `${API_URL}?projectId=${projectId}`;\n}\nasync function sendRequest(method, params) {\n    const url = getApiUrl();\n    const requestBody = {\n        jsonrpc: '2.0',\n        id: 1,\n        method,\n        params\n    };\n    const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: { 'Content-Type': 'application/json' }\n    });\n    const json = await response.json();\n    if (json.error) {\n        throw new JsonRpcError(json.error.message);\n    }\n    return json;\n}\nexport async function getExchanges(params) {\n    const response = await sendRequest('reown_getExchanges', params);\n    return response.result;\n}\nexport async function getPayUrl(params) {\n    const response = await sendRequest('reown_getExchangePayUrl', params);\n    return response.result;\n}\nexport async function getBuyStatus(params) {\n    const response = await sendRequest('reown_getExchangeBuyStatus', params);\n    return response.result;\n}\n//# sourceMappingURL=ApiUtil.js.map","import { ParseUtil } from '@reown/appkit-common';\nconst SUPPORT_PAY_WITH_WALLET_CHAIN_NAMESPACES = ['eip155', 'solana'];\nconst CHAIN_ASSET_INFO_MAP = {\n    eip155: {\n        native: { assetNamespace: 'slip44', assetReference: '60' },\n        defaultTokenNamespace: 'erc20'\n    },\n    solana: {\n        native: { assetNamespace: 'slip44', assetReference: '501' },\n        defaultTokenNamespace: 'token'\n    }\n};\nexport function formatCaip19Asset(caipNetworkId, asset) {\n    const { chainNamespace, chainId } = ParseUtil.parseCaipNetworkId(caipNetworkId);\n    const chainInfo = CHAIN_ASSET_INFO_MAP[chainNamespace];\n    if (!chainInfo) {\n        throw new Error(`Unsupported chain namespace for CAIP-19 formatting: ${chainNamespace}`);\n    }\n    let assetNamespace = chainInfo.native.assetNamespace;\n    let assetReference = chainInfo.native.assetReference;\n    if (asset !== 'native') {\n        assetNamespace = chainInfo.defaultTokenNamespace;\n        assetReference = asset;\n    }\n    const networkPart = `${chainNamespace}:${chainId}`;\n    return `${networkPart}/${assetNamespace}:${assetReference}`;\n}\nexport function isPayWithWalletSupported(networkId) {\n    const { chainNamespace } = ParseUtil.parseCaipNetworkId(networkId);\n    return SUPPORT_PAY_WITH_WALLET_CHAIN_NAMESPACES.includes(chainNamespace);\n}\n//# sourceMappingURL=AssetUtil.js.map","import { ConstantsUtil, ContractUtil } from '@reown/appkit-common';\nimport { ChainController, ConnectionController, CoreHelperUtil } from '@reown/appkit-controllers';\nimport { ProviderUtil } from '@reown/appkit-utils';\nimport { AppKitPayError } from '../types/errors.js';\nimport { AppKitPayErrorCodes } from '../types/errors.js';\nexport async function ensureCorrectNetwork(options) {\n    const { paymentAssetNetwork, activeCaipNetwork, approvedCaipNetworkIds, requestedCaipNetworks } = options;\n    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);\n    const assetCaipNetwork = sortedNetworks.find(network => network.caipNetworkId === paymentAssetNetwork);\n    if (!assetCaipNetwork) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG);\n    }\n    if (assetCaipNetwork.caipNetworkId === activeCaipNetwork.caipNetworkId) {\n        return;\n    }\n    const isSupportingAllNetworks = ChainController.getNetworkProp('supportsAllNetworks', assetCaipNetwork.chainNamespace);\n    const isSwitchAllowed = approvedCaipNetworkIds?.includes(assetCaipNetwork.caipNetworkId) || isSupportingAllNetworks;\n    if (!isSwitchAllowed) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG);\n    }\n    try {\n        await ChainController.switchActiveNetwork(assetCaipNetwork);\n    }\n    catch (error) {\n        throw new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR, error);\n    }\n}\nexport async function processEvmNativePayment(paymentAsset, chainNamespace, params) {\n    if (chainNamespace !== ConstantsUtil.CHAIN.EVM) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_CHAIN_NAMESPACE);\n    }\n    if (!params.fromAddress) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG, 'fromAddress is required for native EVM payments.');\n    }\n    const amountValue = typeof params.amount === 'string' ? parseFloat(params.amount) : params.amount;\n    if (isNaN(amountValue)) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG);\n    }\n    const decimals = paymentAsset.metadata?.decimals ?? 18;\n    const amountBigInt = ConnectionController.parseUnits(amountValue.toString(), decimals);\n    if (typeof amountBigInt !== 'bigint') {\n        throw new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR);\n    }\n    const txResponse = await ConnectionController.sendTransaction({\n        chainNamespace,\n        to: params.recipient,\n        address: params.fromAddress,\n        value: amountBigInt,\n        data: '0x'\n    });\n    return txResponse ?? undefined;\n}\nexport async function processEvmErc20Payment(paymentAsset, params) {\n    if (!params.fromAddress) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG, 'fromAddress is required for ERC20 EVM payments.');\n    }\n    const tokenAddress = paymentAsset.asset;\n    const recipientAddress = params.recipient;\n    const decimals = Number(paymentAsset.metadata.decimals);\n    const amountBigInt = ConnectionController.parseUnits(params.amount.toString(), decimals);\n    if (amountBigInt === undefined) {\n        throw new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR);\n    }\n    const txResponse = await ConnectionController.writeContract({\n        fromAddress: params.fromAddress,\n        tokenAddress,\n        args: [recipientAddress, amountBigInt],\n        method: 'transfer',\n        abi: ContractUtil.getERC20Abi(tokenAddress),\n        chainNamespace: ConstantsUtil.CHAIN.EVM\n    });\n    return txResponse ?? undefined;\n}\nexport async function processSolanaPayment(chainNamespace, params) {\n    if (chainNamespace !== ConstantsUtil.CHAIN.SOLANA) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_CHAIN_NAMESPACE);\n    }\n    if (!params.fromAddress) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG, 'fromAddress is required for Solana payments.');\n    }\n    const amountValue = typeof params.amount === 'string' ? parseFloat(params.amount) : params.amount;\n    if (isNaN(amountValue) || amountValue <= 0) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG, 'Invalid payment amount.');\n    }\n    try {\n        const provider = ProviderUtil.getProvider(chainNamespace);\n        if (!provider) {\n            throw new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR, 'No Solana provider available.');\n        }\n        const txResponse = await ConnectionController.sendTransaction({\n            chainNamespace: ConstantsUtil.CHAIN.SOLANA,\n            to: params.recipient,\n            value: amountValue,\n            tokenMint: params.tokenMint\n        });\n        if (!txResponse) {\n            throw new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR, 'Transaction failed.');\n        }\n        return txResponse;\n    }\n    catch (error) {\n        if (error instanceof AppKitPayError) {\n            throw error;\n        }\n        throw new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR, `Solana payment failed: ${error}`);\n    }\n}\n//# sourceMappingURL=PaymentUtil.js.map","import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { ConstantsUtil, ParseUtil } from '@reown/appkit-common';\nimport { AccountController, ChainController, ConnectionController, CoreHelperUtil, EventsController, ModalController, RouterController, SnackController } from '@reown/appkit-controllers';\nimport { ProviderUtil } from '@reown/appkit-utils';\nimport { AppKitPayErrorCodes, AppKitPayErrorMessages } from '../types/errors.js';\nimport { AppKitPayError } from '../types/errors.js';\nimport { getBuyStatus, getExchanges, getPayUrl } from '../utils/ApiUtil.js';\nimport { formatCaip19Asset } from '../utils/AssetUtil.js';\nimport { ensureCorrectNetwork, processEvmErc20Payment, processEvmNativePayment, processSolanaPayment } from '../utils/PaymentUtil.js';\nconst DEFAULT_PAGE = 0;\nconst DEFAULT_PAYMENT_ID = 'unknown';\nconst state = proxy({\n    paymentAsset: {\n        network: 'eip155:1',\n        asset: '0x0',\n        metadata: {\n            name: '0x0',\n            symbol: '0x0',\n            decimals: 0\n        }\n    },\n    recipient: '0x0',\n    amount: 0,\n    isConfigured: false,\n    error: null,\n    isPaymentInProgress: false,\n    exchanges: [],\n    isLoading: false,\n    openInNewTab: true,\n    redirectUrl: undefined,\n    payWithExchange: undefined,\n    currentPayment: undefined,\n    analyticsSet: false,\n    paymentId: undefined\n});\nexport const PayController = {\n    state,\n    subscribe(callback) {\n        return sub(state, () => callback(state));\n    },\n    subscribeKey(key, callback) {\n        return subKey(state, key, callback);\n    },\n    async handleOpenPay(options) {\n        this.resetState();\n        this.setPaymentConfig(options);\n        this.subscribeEvents();\n        this.initializeAnalytics();\n        state.isConfigured = true;\n        EventsController.sendEvent({\n            type: 'track',\n            event: 'PAY_MODAL_OPEN',\n            properties: {\n                exchanges: state.exchanges,\n                configuration: {\n                    network: state.paymentAsset.network,\n                    asset: state.paymentAsset.asset,\n                    recipient: state.recipient,\n                    amount: state.amount\n                }\n            }\n        });\n        await ModalController.open({\n            view: 'Pay'\n        });\n    },\n    resetState() {\n        state.paymentAsset = {\n            network: 'eip155:1',\n            asset: '0x0',\n            metadata: { name: '0x0', symbol: '0x0', decimals: 0 }\n        };\n        state.recipient = '0x0';\n        state.amount = 0;\n        state.isConfigured = false;\n        state.error = null;\n        state.isPaymentInProgress = false;\n        state.isLoading = false;\n        state.currentPayment = undefined;\n    },\n    setPaymentConfig(config) {\n        if (!config.paymentAsset) {\n            throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG);\n        }\n        try {\n            state.paymentAsset = config.paymentAsset;\n            state.recipient = config.recipient;\n            state.amount = config.amount;\n            state.openInNewTab = config.openInNewTab ?? true;\n            state.redirectUrl = config.redirectUrl;\n            state.payWithExchange = config.payWithExchange;\n            state.error = null;\n        }\n        catch (error) {\n            throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG, error.message);\n        }\n    },\n    getPaymentAsset() {\n        return state.paymentAsset;\n    },\n    getExchanges() {\n        return state.exchanges;\n    },\n    async fetchExchanges() {\n        try {\n            state.isLoading = true;\n            const response = await getExchanges({\n                page: DEFAULT_PAGE,\n                asset: formatCaip19Asset(state.paymentAsset.network, state.paymentAsset.asset),\n                amount: state.amount.toString()\n            });\n            state.exchanges = response.exchanges.slice(0, 2);\n        }\n        catch (error) {\n            SnackController.showError(AppKitPayErrorMessages.UNABLE_TO_GET_EXCHANGES);\n            throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_GET_EXCHANGES);\n        }\n        finally {\n            state.isLoading = false;\n        }\n    },\n    async getAvailableExchanges(params) {\n        try {\n            const asset = params?.asset && params?.network\n                ? formatCaip19Asset(params.network, params.asset)\n                : undefined;\n            const response = await getExchanges({\n                page: params?.page ?? DEFAULT_PAGE,\n                asset,\n                amount: params?.amount?.toString()\n            });\n            return response;\n        }\n        catch (error) {\n            throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_GET_EXCHANGES);\n        }\n    },\n    async getPayUrl(exchangeId, params, headless = false) {\n        try {\n            const numericAmount = Number(params.amount);\n            const response = await getPayUrl({\n                exchangeId,\n                asset: formatCaip19Asset(params.network, params.asset),\n                amount: numericAmount.toString(),\n                recipient: `${params.network}:${params.recipient}`\n            });\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'PAY_EXCHANGE_SELECTED',\n                properties: {\n                    exchange: {\n                        id: exchangeId\n                    },\n                    configuration: {\n                        network: params.network,\n                        asset: params.asset,\n                        recipient: params.recipient,\n                        amount: numericAmount\n                    },\n                    currentPayment: {\n                        type: 'exchange',\n                        exchangeId\n                    },\n                    headless\n                }\n            });\n            if (headless) {\n                this.initiatePayment();\n                EventsController.sendEvent({\n                    type: 'track',\n                    event: 'PAY_INITIATED',\n                    properties: {\n                        paymentId: state.paymentId || DEFAULT_PAYMENT_ID,\n                        configuration: {\n                            network: params.network,\n                            asset: params.asset,\n                            recipient: params.recipient,\n                            amount: numericAmount\n                        },\n                        currentPayment: {\n                            type: 'exchange',\n                            exchangeId\n                        }\n                    }\n                });\n            }\n            return response;\n        }\n        catch (error) {\n            if (error instanceof Error && error.message.includes('is not supported')) {\n                throw new AppKitPayError(AppKitPayErrorCodes.ASSET_NOT_SUPPORTED);\n            }\n            throw new Error(error.message);\n        }\n    },\n    async openPayUrl(openParams, params, headless = false) {\n        try {\n            const payUrl = await this.getPayUrl(openParams.exchangeId, params, headless);\n            if (!payUrl) {\n                throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_GET_PAY_URL);\n            }\n            const shouldOpenInNewTab = openParams.openInNewTab ?? true;\n            const target = shouldOpenInNewTab ? '_blank' : '_self';\n            CoreHelperUtil.openHref(payUrl.url, target);\n            return payUrl;\n        }\n        catch (error) {\n            if (error instanceof AppKitPayError) {\n                state.error = error.message;\n            }\n            else {\n                state.error = AppKitPayErrorMessages.GENERIC_PAYMENT_ERROR;\n            }\n            throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_GET_PAY_URL);\n        }\n    },\n    subscribeEvents() {\n        if (state.isConfigured) {\n            return;\n        }\n        ConnectionController.subscribeKey('connections', connections => {\n            if (connections.size > 0) {\n                this.handlePayment();\n            }\n        });\n        AccountController.subscribeKey('caipAddress', caipAddress => {\n            const hasWcConnection = ConnectionController.hasAnyConnection(ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT);\n            if (caipAddress) {\n                if (hasWcConnection) {\n                    setTimeout(() => {\n                        this.handlePayment();\n                    }, 100);\n                }\n                else {\n                    this.handlePayment();\n                }\n            }\n        });\n    },\n    async handlePayment() {\n        state.currentPayment = {\n            type: 'wallet',\n            status: 'IN_PROGRESS'\n        };\n        const caipAddress = AccountController.state.caipAddress;\n        if (!caipAddress) {\n            return;\n        }\n        const { chainId, address } = ParseUtil.parseCaipAddress(caipAddress);\n        const chainNamespace = ChainController.state.activeChain;\n        if (!address || !chainId || !chainNamespace) {\n            return;\n        }\n        const provider = ProviderUtil.getProvider(chainNamespace);\n        if (!provider) {\n            return;\n        }\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!caipNetwork) {\n            return;\n        }\n        if (state.isPaymentInProgress) {\n            return;\n        }\n        try {\n            this.initiatePayment();\n            const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();\n            const approvedCaipNetworkIds = ChainController.getAllApprovedCaipNetworkIds();\n            await ensureCorrectNetwork({\n                paymentAssetNetwork: state.paymentAsset.network,\n                activeCaipNetwork: caipNetwork,\n                approvedCaipNetworkIds,\n                requestedCaipNetworks\n            });\n            await ModalController.open({\n                view: 'PayLoading'\n            });\n            switch (chainNamespace) {\n                case ConstantsUtil.CHAIN.EVM:\n                    if (state.paymentAsset.asset === 'native') {\n                        state.currentPayment.result = await processEvmNativePayment(state.paymentAsset, chainNamespace, {\n                            recipient: state.recipient,\n                            amount: state.amount,\n                            fromAddress: address\n                        });\n                    }\n                    if (state.paymentAsset.asset.startsWith('0x')) {\n                        state.currentPayment.result = await processEvmErc20Payment(state.paymentAsset, {\n                            recipient: state.recipient,\n                            amount: state.amount,\n                            fromAddress: address\n                        });\n                    }\n                    state.currentPayment.status = 'SUCCESS';\n                    break;\n                case ConstantsUtil.CHAIN.SOLANA:\n                    state.currentPayment.result = await processSolanaPayment(chainNamespace, {\n                        recipient: state.recipient,\n                        amount: state.amount,\n                        fromAddress: address,\n                        tokenMint: state.paymentAsset.asset === 'native' ? undefined : state.paymentAsset.asset\n                    });\n                    state.currentPayment.status = 'SUCCESS';\n                    break;\n                default:\n                    throw new AppKitPayError(AppKitPayErrorCodes.INVALID_CHAIN_NAMESPACE);\n            }\n        }\n        catch (error) {\n            if (error instanceof AppKitPayError) {\n                state.error = error.message;\n            }\n            else {\n                state.error = AppKitPayErrorMessages.GENERIC_PAYMENT_ERROR;\n            }\n            state.currentPayment.status = 'FAILED';\n            SnackController.showError(state.error);\n        }\n        finally {\n            state.isPaymentInProgress = false;\n        }\n    },\n    getExchangeById(exchangeId) {\n        return state.exchanges.find(exchange => exchange.id === exchangeId);\n    },\n    validatePayConfig(config) {\n        const { paymentAsset, recipient, amount } = config;\n        if (!paymentAsset) {\n            throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG);\n        }\n        if (!recipient) {\n            throw new AppKitPayError(AppKitPayErrorCodes.INVALID_RECIPIENT);\n        }\n        if (!paymentAsset.asset) {\n            throw new AppKitPayError(AppKitPayErrorCodes.INVALID_ASSET);\n        }\n        if (amount === undefined || amount === null || amount <= 0) {\n            throw new AppKitPayError(AppKitPayErrorCodes.INVALID_AMOUNT);\n        }\n    },\n    handlePayWithWallet() {\n        const caipAddress = AccountController.state.caipAddress;\n        if (!caipAddress) {\n            RouterController.push('Connect');\n            return;\n        }\n        const { chainId, address } = ParseUtil.parseCaipAddress(caipAddress);\n        const chainNamespace = ChainController.state.activeChain;\n        if (!address || !chainId || !chainNamespace) {\n            RouterController.push('Connect');\n            return;\n        }\n        this.handlePayment();\n    },\n    async handlePayWithExchange(exchangeId) {\n        try {\n            state.currentPayment = {\n                type: 'exchange',\n                exchangeId\n            };\n            const { network, asset } = state.paymentAsset;\n            const payUrlParams = {\n                network,\n                asset,\n                amount: state.amount,\n                recipient: state.recipient\n            };\n            const payUrl = await this.getPayUrl(exchangeId, payUrlParams);\n            if (!payUrl) {\n                throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_INITIATE_PAYMENT);\n            }\n            state.currentPayment.sessionId = payUrl.sessionId;\n            state.currentPayment.status = 'IN_PROGRESS';\n            state.currentPayment.exchangeId = exchangeId;\n            this.initiatePayment();\n            return {\n                url: payUrl.url,\n                openInNewTab: state.openInNewTab\n            };\n        }\n        catch (error) {\n            if (error instanceof AppKitPayError) {\n                state.error = error.message;\n            }\n            else {\n                state.error = AppKitPayErrorMessages.GENERIC_PAYMENT_ERROR;\n            }\n            state.isPaymentInProgress = false;\n            SnackController.showError(state.error);\n            return null;\n        }\n    },\n    async getBuyStatus(exchangeId, sessionId) {\n        try {\n            const status = await getBuyStatus({ sessionId, exchangeId });\n            if (status.status === 'SUCCESS' || status.status === 'FAILED') {\n                EventsController.sendEvent({\n                    type: 'track',\n                    event: status.status === 'SUCCESS' ? 'PAY_SUCCESS' : 'PAY_ERROR',\n                    properties: {\n                        paymentId: state.paymentId || DEFAULT_PAYMENT_ID,\n                        configuration: {\n                            network: state.paymentAsset.network,\n                            asset: state.paymentAsset.asset,\n                            recipient: state.recipient,\n                            amount: state.amount\n                        },\n                        currentPayment: {\n                            type: 'exchange',\n                            exchangeId: state.currentPayment?.exchangeId,\n                            sessionId: state.currentPayment?.sessionId,\n                            result: status.txHash\n                        }\n                    }\n                });\n            }\n            return status;\n        }\n        catch (error) {\n            throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_GET_BUY_STATUS);\n        }\n    },\n    async updateBuyStatus(exchangeId, sessionId) {\n        try {\n            const status = await this.getBuyStatus(exchangeId, sessionId);\n            if (state.currentPayment) {\n                state.currentPayment.status = status.status;\n                state.currentPayment.result = status.txHash;\n            }\n            if (status.status === 'SUCCESS' || status.status === 'FAILED') {\n                state.isPaymentInProgress = false;\n            }\n        }\n        catch (error) {\n            throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_GET_BUY_STATUS);\n        }\n    },\n    initiatePayment() {\n        state.isPaymentInProgress = true;\n        state.paymentId = crypto.randomUUID();\n    },\n    initializeAnalytics() {\n        if (state.analyticsSet) {\n            return;\n        }\n        state.analyticsSet = true;\n        this.subscribeKey('isPaymentInProgress', _ => {\n            if (state.currentPayment?.status && state.currentPayment.status !== 'UNKNOWN') {\n                const eventType = {\n                    IN_PROGRESS: 'PAY_INITIATED',\n                    SUCCESS: 'PAY_SUCCESS',\n                    FAILED: 'PAY_ERROR'\n                }[state.currentPayment.status];\n                EventsController.sendEvent({\n                    type: 'track',\n                    event: eventType,\n                    properties: {\n                        paymentId: state.paymentId || DEFAULT_PAYMENT_ID,\n                        configuration: {\n                            network: state.paymentAsset.network,\n                            asset: state.paymentAsset.asset,\n                            recipient: state.recipient,\n                            amount: state.amount\n                        },\n                        currentPayment: {\n                            type: state.currentPayment.type,\n                            exchangeId: state.currentPayment.exchangeId,\n                            sessionId: state.currentPayment.sessionId,\n                            result: state.currentPayment.result\n                        }\n                    }\n                });\n            }\n        });\n    }\n};\n//# sourceMappingURL=PayController.js.map","import { css } from 'lit';\nexport default css `\n  wui-separator {\n    margin: var(--wui-spacing-m) calc(var(--wui-spacing-m) * -1) var(--wui-spacing-xs)\n      calc(var(--wui-spacing-m) * -1);\n    width: calc(100% + var(--wui-spacing-s) * 2);\n  }\n\n  .token-display {\n    padding: var(--wui-spacing-s) var(--wui-spacing-m);\n    border-radius: var(--wui-border-radius-s);\n    background-color: var(--wui-color-bg-125);\n    margin-top: var(--wui-spacing-s);\n    margin-bottom: var(--wui-spacing-s);\n  }\n\n  .token-display wui-text {\n    text-transform: none;\n  }\n\n  wui-loading-spinner {\n    padding: var(--wui-spacing-xs);\n  }\n`;\n//# sourceMappingURL=styles.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { AccountController, ChainController, ConnectionController, CoreHelperUtil, ModalController, SnackController } from '@reown/appkit-controllers';\nimport { customElement } from '@reown/appkit-ui';\nimport '@reown/appkit-ui/wui-button';\nimport '@reown/appkit-ui/wui-flex';\nimport '@reown/appkit-ui/wui-icon';\nimport '@reown/appkit-ui/wui-icon-button';\nimport '@reown/appkit-ui/wui-icon-link';\nimport '@reown/appkit-ui/wui-image';\nimport '@reown/appkit-ui/wui-list-item';\nimport '@reown/appkit-ui/wui-loading-spinner';\nimport '@reown/appkit-ui/wui-network-image';\nimport '@reown/appkit-ui/wui-separator';\nimport '@reown/appkit-ui/wui-text';\nimport '@reown/appkit-ui/wui-wallet-image';\nimport { PayController } from '../../controllers/PayController.js';\nimport { isPayWithWalletSupported } from '../../utils/AssetUtil.js';\nimport styles from './styles.js';\nlet W3mPayView = class W3mPayView extends LitElement {\n    constructor() {\n        super();\n        this.unsubscribe = [];\n        this.amount = '';\n        this.tokenSymbol = '';\n        this.networkName = '';\n        this.exchanges = PayController.state.exchanges;\n        this.isLoading = PayController.state.isLoading;\n        this.loadingExchangeId = null;\n        this.connectedWalletInfo = AccountController.state.connectedWalletInfo;\n        this.initializePaymentDetails();\n        this.unsubscribe.push(PayController.subscribeKey('exchanges', val => (this.exchanges = val)));\n        this.unsubscribe.push(PayController.subscribeKey('isLoading', val => (this.isLoading = val)));\n        this.unsubscribe.push(AccountController.subscribe(newState => (this.connectedWalletInfo = newState.connectedWalletInfo)));\n        PayController.fetchExchanges();\n    }\n    get isWalletConnected() {\n        return AccountController.state.status === 'connected';\n    }\n    render() {\n        return html `\n      <wui-flex flexDirection=\"column\">\n        <wui-flex flexDirection=\"column\" .padding=${['0', 'l', 'l', 'l']} gap=\"s\">\n          ${this.renderPaymentHeader()}\n\n          <wui-flex flexDirection=\"column\" gap=\"s\">\n            ${this.renderPayWithWallet()} ${this.renderExchangeOptions()}\n          </wui-flex>\n        </wui-flex>\n      </wui-flex>\n    `;\n    }\n    initializePaymentDetails() {\n        const paymentAsset = PayController.getPaymentAsset();\n        this.networkName = paymentAsset.network;\n        this.tokenSymbol = paymentAsset.metadata.symbol;\n        this.amount = PayController.state.amount.toString();\n    }\n    renderPayWithWallet() {\n        if (!isPayWithWalletSupported(this.networkName)) {\n            return html ``;\n        }\n        return html `<wui-flex flexDirection=\"column\" gap=\"s\">\n        ${this.isWalletConnected ? this.renderConnectedView() : this.renderDisconnectedView()}\n      </wui-flex>\n      <wui-separator text=\"or\"></wui-separator>`;\n    }\n    renderPaymentHeader() {\n        let displayNetworkName = this.networkName;\n        if (this.networkName) {\n            const allNetworks = ChainController.getAllRequestedCaipNetworks();\n            const targetNetwork = allNetworks.find(net => net.caipNetworkId === this.networkName);\n            if (targetNetwork) {\n                displayNetworkName = targetNetwork['name'];\n            }\n        }\n        return html `\n      <wui-flex flexDirection=\"column\" alignItems=\"center\">\n        <wui-flex alignItems=\"center\" gap=\"xs\">\n          <wui-text variant=\"large-700\" color=\"fg-100\">${this.amount || '0.0000'}</wui-text>\n          <wui-flex class=\"token-display\" alignItems=\"center\" gap=\"xxs\">\n            <wui-text variant=\"paragraph-600\" color=\"fg-100\">\n              ${this.tokenSymbol || 'Unknown Asset'}\n            </wui-text>\n            ${displayNetworkName\n            ? html `\n                  <wui-text variant=\"small-500\" color=\"fg-200\"> on ${displayNetworkName} </wui-text>\n                `\n            : ''}\n          </wui-flex>\n        </wui-flex>\n      </wui-flex>\n    `;\n    }\n    renderConnectedView() {\n        const walletName = this.connectedWalletInfo?.name || 'connected wallet';\n        return html `\n      <wui-list-item\n        @click=${this.onWalletPayment}\n        ?chevron=${true}\n        data-testid=\"wallet-payment-option\"\n      >\n        <wui-flex alignItems=\"center\" gap=\"s\">\n          <wui-wallet-image\n            size=\"sm\"\n            imageSrc=${ifDefined(this.connectedWalletInfo?.icon)}\n            name=${ifDefined(this.connectedWalletInfo?.name)}\n          ></wui-wallet-image>\n          <wui-text variant=\"paragraph-500\" color=\"inherit\">Pay with ${walletName}</wui-text>\n        </wui-flex>\n      </wui-list-item>\n\n      <wui-list-item\n        variant=\"icon\"\n        iconVariant=\"overlay\"\n        icon=\"disconnect\"\n        @click=${this.onDisconnect}\n        data-testid=\"disconnect-button\"\n        ?chevron=${false}\n      >\n        <wui-text variant=\"paragraph-500\" color=\"fg-200\">Disconnect</wui-text>\n      </wui-list-item>\n    `;\n    }\n    renderDisconnectedView() {\n        return html `<wui-list-item\n      variant=\"icon\"\n      iconVariant=\"overlay\"\n      icon=\"walletPlaceholder\"\n      @click=${this.onWalletPayment}\n      ?chevron=${true}\n      data-testid=\"wallet-payment-option\"\n    >\n      <wui-text variant=\"paragraph-500\" color=\"inherit\">Pay from wallet</wui-text>\n    </wui-list-item>`;\n    }\n    renderExchangeOptions() {\n        if (this.isLoading) {\n            return html `<wui-flex justifyContent=\"center\" alignItems=\"center\">\n        <wui-spinner size=\"md\"></wui-spinner>\n      </wui-flex>`;\n        }\n        if (this.exchanges.length === 0) {\n            return html `<wui-flex justifyContent=\"center\" alignItems=\"center\">\n        <wui-text variant=\"paragraph-500\" color=\"fg-100\">No exchanges available</wui-text>\n      </wui-flex>`;\n        }\n        return this.exchanges.map(exchange => html `\n        <wui-list-item\n          @click=${() => this.onExchangePayment(exchange.id)}\n          data-testid=\"exchange-option-${exchange.id}\"\n          ?chevron=${true}\n          ?disabled=${this.loadingExchangeId !== null}\n        >\n          <wui-flex alignItems=\"center\" gap=\"s\">\n            ${this.loadingExchangeId === exchange.id\n            ? html `<wui-loading-spinner color=\"accent-100\" size=\"md\"></wui-loading-spinner>`\n            : html `<wui-wallet-image\n                  size=\"sm\"\n                  imageSrc=${ifDefined(exchange.imageUrl)}\n                  name=${exchange.name}\n                ></wui-wallet-image>`}\n            <wui-text flexGrow=\"1\" variant=\"paragraph-500\" color=\"inherit\"\n              >Pay with ${exchange.name} <wui-spinner size=\"sm\" color=\"fg-200\"></wui-spinner\n            ></wui-text>\n          </wui-flex>\n        </wui-list-item>\n      `);\n    }\n    onWalletPayment() {\n        PayController.handlePayWithWallet();\n    }\n    async onExchangePayment(exchangeId) {\n        try {\n            this.loadingExchangeId = exchangeId;\n            const result = await PayController.handlePayWithExchange(exchangeId);\n            if (result) {\n                await ModalController.open({\n                    view: 'PayLoading'\n                });\n                CoreHelperUtil.openHref(result.url, result.openInNewTab ? '_blank' : '_self');\n            }\n        }\n        catch (error) {\n            console.error('Failed to pay with exchange', error);\n            SnackController.showError('Failed to pay with exchange');\n        }\n        finally {\n            this.loadingExchangeId = null;\n        }\n    }\n    async onDisconnect(e) {\n        e.stopPropagation();\n        try {\n            await ConnectionController.disconnect();\n        }\n        catch {\n            console.error('Failed to disconnect');\n            SnackController.showError('Failed to disconnect');\n        }\n    }\n    disconnectedCallback() {\n        this.unsubscribe.forEach(unsubscribe => unsubscribe());\n    }\n};\nW3mPayView.styles = styles;\n__decorate([\n    state()\n], W3mPayView.prototype, \"amount\", void 0);\n__decorate([\n    state()\n], W3mPayView.prototype, \"tokenSymbol\", void 0);\n__decorate([\n    state()\n], W3mPayView.prototype, \"networkName\", void 0);\n__decorate([\n    state()\n], W3mPayView.prototype, \"exchanges\", void 0);\n__decorate([\n    state()\n], W3mPayView.prototype, \"isLoading\", void 0);\n__decorate([\n    state()\n], W3mPayView.prototype, \"loadingExchangeId\", void 0);\n__decorate([\n    state()\n], W3mPayView.prototype, \"connectedWalletInfo\", void 0);\nW3mPayView = __decorate([\n    customElement('w3m-pay-view')\n], W3mPayView);\nexport { W3mPayView };\n//# sourceMappingURL=index.js.map","import { css } from 'lit';\nexport default css `\n  :host {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n\n  wui-flex:first-child:not(:only-child) {\n    position: relative;\n  }\n\n  wui-loading-thumbnail {\n    position: absolute;\n  }\n`;\n//# sourceMappingURL=styles.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { AccountController, AssetUtil, ChainController, ConnectionController, ConnectorController, ModalController, ThemeController } from '@reown/appkit-controllers';\nimport { customElement } from '@reown/appkit-ui';\nimport '@reown/appkit-ui/wui-flex';\nimport '@reown/appkit-ui/wui-icon';\nimport '@reown/appkit-ui/wui-loading-thumbnail';\nimport '@reown/appkit-ui/wui-text';\nimport '@reown/appkit-ui/wui-wallet-image';\nimport { PayController } from '../../controllers/PayController.js';\nimport styles from './styles.js';\nconst EXCHANGE_STATUS_CHECK_INTERVAL = 4000;\nlet W3mPayLoadingView = class W3mPayLoadingView extends LitElement {\n    constructor() {\n        super();\n        this.loadingMessage = '';\n        this.subMessage = '';\n        this.paymentState = 'in-progress';\n        this.paymentState = PayController.state.isPaymentInProgress ? 'in-progress' : 'completed';\n        this.updateMessages();\n        this.setupSubscription();\n        this.setupExchangeSubscription();\n    }\n    disconnectedCallback() {\n        clearInterval(this.exchangeSubscription);\n    }\n    render() {\n        return html `\n      <wui-flex\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        .padding=${['xl', 'xl', 'xl', 'xl']}\n        gap=\"xl\"\n      >\n        <wui-flex justifyContent=\"center\" alignItems=\"center\"> ${this.getStateIcon()} </wui-flex>\n        <wui-flex flexDirection=\"column\" alignItems=\"center\" gap=\"xs\">\n          <wui-text align=\"center\" variant=\"paragraph-500\" color=\"fg-100\">\n            ${this.loadingMessage}\n          </wui-text>\n          <wui-text align=\"center\" variant=\"small-400\" color=\"fg-200\">\n            ${this.subMessage}\n          </wui-text>\n        </wui-flex>\n      </wui-flex>\n    `;\n    }\n    updateMessages() {\n        switch (this.paymentState) {\n            case 'completed':\n                this.loadingMessage = 'Payment completed';\n                this.subMessage = 'Your transaction has been successfully processed';\n                break;\n            case 'error':\n                this.loadingMessage = 'Payment failed';\n                this.subMessage = 'There was an error processing your transaction';\n                break;\n            case 'in-progress':\n            default:\n                if (PayController.state.currentPayment?.type === 'exchange') {\n                    this.loadingMessage = 'Payment initiated';\n                    this.subMessage = `Please complete the payment on the exchange`;\n                }\n                else {\n                    this.loadingMessage = 'Awaiting payment confirmation';\n                    this.subMessage = 'Please confirm the payment transaction in your wallet';\n                }\n                break;\n        }\n    }\n    getStateIcon() {\n        switch (this.paymentState) {\n            case 'completed':\n                return this.successTemplate();\n            case 'error':\n                return this.errorTemplate();\n            case 'in-progress':\n            default:\n                return this.loaderTemplate();\n        }\n    }\n    setupExchangeSubscription() {\n        if (PayController.state.currentPayment?.type !== 'exchange') {\n            return;\n        }\n        this.exchangeSubscription = setInterval(async () => {\n            const exchangeId = PayController.state.currentPayment?.exchangeId;\n            const sessionId = PayController.state.currentPayment?.sessionId;\n            if (exchangeId && sessionId) {\n                await PayController.updateBuyStatus(exchangeId, sessionId);\n                if (PayController.state.currentPayment?.status === 'SUCCESS') {\n                    clearInterval(this.exchangeSubscription);\n                }\n            }\n        }, EXCHANGE_STATUS_CHECK_INTERVAL);\n    }\n    setupSubscription() {\n        PayController.subscribeKey('isPaymentInProgress', (inProgress) => {\n            if (!inProgress && this.paymentState === 'in-progress') {\n                if (PayController.state.error || !PayController.state.currentPayment?.result) {\n                    this.paymentState = 'error';\n                }\n                else {\n                    this.paymentState = 'completed';\n                }\n                this.updateMessages();\n                setTimeout(() => {\n                    if (ConnectionController.state.status === 'disconnected') {\n                        return;\n                    }\n                    ModalController.close();\n                }, 3000);\n            }\n        });\n        PayController.subscribeKey('error', (error) => {\n            if (error && this.paymentState === 'in-progress') {\n                this.paymentState = 'error';\n                this.updateMessages();\n            }\n        });\n    }\n    loaderTemplate() {\n        const borderRadiusMaster = ThemeController.state.themeVariables['--w3m-border-radius-master'];\n        const radius = borderRadiusMaster ? parseInt(borderRadiusMaster.replace('px', ''), 10) : 4;\n        const iconSrc = this.getPaymentIcon();\n        return html `\n      <wui-flex justifyContent=\"center\" alignItems=\"center\" style=\"position: relative;\">\n        ${iconSrc\n            ? html `<wui-wallet-image size=\"lg\" imageSrc=${iconSrc}></wui-wallet-image>`\n            : null}\n        <wui-loading-thumbnail radius=${radius * 9}></wui-loading-thumbnail>\n      </wui-flex>\n    `;\n    }\n    getPaymentIcon() {\n        const currentPayment = PayController.state.currentPayment;\n        if (!currentPayment) {\n            return undefined;\n        }\n        if (currentPayment.type === 'exchange') {\n            const exchangeId = currentPayment.exchangeId;\n            if (exchangeId) {\n                const exchange = PayController.getExchangeById(exchangeId);\n                return exchange?.imageUrl;\n            }\n        }\n        if (currentPayment.type === 'wallet') {\n            const walletIcon = AccountController.state.connectedWalletInfo?.icon;\n            if (walletIcon) {\n                return walletIcon;\n            }\n            const chainNamespace = ChainController.state.activeChain;\n            if (!chainNamespace) {\n                return undefined;\n            }\n            const connectorId = ConnectorController.getConnectorId(chainNamespace);\n            if (!connectorId) {\n                return undefined;\n            }\n            const connector = ConnectorController.getConnectorById(connectorId);\n            if (!connector) {\n                return undefined;\n            }\n            return AssetUtil.getConnectorImage(connector);\n        }\n        return undefined;\n    }\n    successTemplate() {\n        return html `<wui-icon size=\"xl\" color=\"success-100\" name=\"checkmark\"></wui-icon>`;\n    }\n    errorTemplate() {\n        return html `<wui-icon size=\"xl\" color=\"error-100\" name=\"close\"></wui-icon>`;\n    }\n};\nW3mPayLoadingView.styles = styles;\n__decorate([\n    state()\n], W3mPayLoadingView.prototype, \"loadingMessage\", void 0);\n__decorate([\n    state()\n], W3mPayLoadingView.prototype, \"subMessage\", void 0);\n__decorate([\n    state()\n], W3mPayLoadingView.prototype, \"paymentState\", void 0);\nW3mPayLoadingView = __decorate([\n    customElement('w3m-pay-loading-view')\n], W3mPayLoadingView);\nexport { W3mPayLoadingView };\n//# sourceMappingURL=index.js.map","import { PayController } from './controllers/PayController.js';\nimport { AppKitPayError, AppKitPayErrorCodes } from './types/errors.js';\nconst PAYMENT_TIMEOUT_MS = 300000;\nexport async function openPay(options) {\n    return PayController.handleOpenPay(options);\n}\nexport async function pay(options, timeoutMs = PAYMENT_TIMEOUT_MS) {\n    if (timeoutMs <= 0) {\n        throw new AppKitPayError(AppKitPayErrorCodes.INVALID_PAYMENT_CONFIG, 'Timeout must be greater than 0');\n    }\n    try {\n        await openPay(options);\n    }\n    catch (error) {\n        if (error instanceof AppKitPayError) {\n            throw error;\n        }\n        throw new AppKitPayError(AppKitPayErrorCodes.UNABLE_TO_INITIATE_PAYMENT, error.message);\n    }\n    return new Promise((resolve, reject) => {\n        let isSettled = false;\n        const timeoutId = setTimeout(() => {\n            if (isSettled) {\n                return;\n            }\n            isSettled = true;\n            cleanup();\n            reject(new AppKitPayError(AppKitPayErrorCodes.GENERIC_PAYMENT_ERROR, 'Payment timeout'));\n        }, timeoutMs);\n        function checkAndResolve() {\n            if (isSettled) {\n                return;\n            }\n            const currentPayment = PayController.state.currentPayment;\n            const error = PayController.state.error;\n            const isInProgress = PayController.state.isPaymentInProgress;\n            if (currentPayment?.status === 'SUCCESS') {\n                isSettled = true;\n                cleanup();\n                clearTimeout(timeoutId);\n                resolve({\n                    success: true,\n                    result: currentPayment.result\n                });\n                return;\n            }\n            if (currentPayment?.status === 'FAILED') {\n                isSettled = true;\n                cleanup();\n                clearTimeout(timeoutId);\n                resolve({\n                    success: false,\n                    error: error || 'Payment failed'\n                });\n                return;\n            }\n            if (error && !isInProgress && !currentPayment) {\n                isSettled = true;\n                cleanup();\n                clearTimeout(timeoutId);\n                resolve({\n                    success: false,\n                    error\n                });\n            }\n        }\n        const unsubscribePayment = subscribeStateKey('currentPayment', checkAndResolve);\n        const unsubscribeError = subscribeStateKey('error', checkAndResolve);\n        const unsubscribeProgress = subscribeStateKey('isPaymentInProgress', checkAndResolve);\n        const cleanup = createCleanupHandler([\n            unsubscribePayment,\n            unsubscribeError,\n            unsubscribeProgress\n        ]);\n        checkAndResolve();\n    });\n}\nexport function getAvailableExchanges(params) {\n    return PayController.getAvailableExchanges(params);\n}\nexport function getPayUrl(exchangeId, params) {\n    return PayController.getPayUrl(exchangeId, params, true);\n}\nexport function openPayUrl(exchangeId, params, openInNewTab) {\n    return PayController.openPayUrl({ exchangeId, openInNewTab }, params, true);\n}\nexport function getExchanges() {\n    return PayController.getExchanges();\n}\nexport function getPayResult() {\n    return PayController.state.currentPayment?.result;\n}\nexport function getPayError() {\n    return PayController.state.error;\n}\nexport function getIsPaymentInProgress() {\n    return PayController.state.isPaymentInProgress;\n}\nexport function subscribeStateKey(key, callback) {\n    return PayController.subscribeKey(key, callback);\n}\nfunction createCleanupHandler(unsubscribeFunctions) {\n    return () => {\n        unsubscribeFunctions.forEach(unsubscribe => {\n            try {\n                unsubscribe();\n            }\n            catch {\n            }\n        });\n    };\n}\n//# sourceMappingURL=client.js.map","export const baseETH = {\n    network: 'eip155:8453',\n    asset: 'native',\n    metadata: {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18\n    }\n};\nexport const baseUSDC = {\n    network: 'eip155:8453',\n    asset: '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913',\n    metadata: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6\n    }\n};\nexport const baseSepoliaETH = {\n    network: 'eip155:84532',\n    asset: 'native',\n    metadata: {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18\n    }\n};\n//# sourceMappingURL=assets.js.map"],"names":["AppKitPayErrorCodes","AppKitPayErrorMessages","AppKitPayError","code","details","API_URL","JsonRpcError","getApiUrl","projectId","OptionsController","sendRequest","method","params","url","json","getExchanges","getPayUrl","getBuyStatus","SUPPORT_PAY_WITH_WALLET_CHAIN_NAMESPACES","CHAIN_ASSET_INFO_MAP","formatCaip19Asset","caipNetworkId","asset","chainNamespace","chainId","ParseUtil","chainInfo","assetNamespace","assetReference","isPayWithWalletSupported","networkId","ensureCorrectNetwork","options","paymentAssetNetwork","activeCaipNetwork","approvedCaipNetworkIds","requestedCaipNetworks","assetCaipNetwork","CoreHelperUtil","network","isSupportingAllNetworks","ChainController","error","processEvmNativePayment","paymentAsset","ConstantsUtil","amountValue","decimals","_a","amountBigInt","ConnectionController","processEvmErc20Payment","tokenAddress","recipientAddress","ContractUtil","processSolanaPayment","ProviderUtil","txResponse","DEFAULT_PAGE","DEFAULT_PAYMENT_ID","state","proxy","PayController","callback","sub","key","subKey","EventsController","ModalController","config","response","SnackController","exchangeId","headless","numericAmount","openParams","payUrl","target","connections","AccountController","caipAddress","hasWcConnection","address","caipNetwork","exchange","recipient","amount","RouterController","payUrlParams","sessionId","status","_b","_","eventType","styles$1","css","__decorate","decorators","desc","c","r","d","i","W3mPayView","LitElement","val","newState","html","displayNetworkName","targetNetwork","net","walletName","ifDefined","_c","result","unsubscribe","styles","customElement","EXCHANGE_STATUS_CHECK_INTERVAL","W3mPayLoadingView","inProgress","borderRadiusMaster","ThemeController","radius","iconSrc","currentPayment","walletIcon","connectorId","ConnectorController","connector","AssetUtil","PAYMENT_TIMEOUT_MS","openPay","pay","timeoutMs","resolve","reject","isSettled","timeoutId","cleanup","checkAndResolve","isInProgress","unsubscribePayment","subscribeStateKey","unsubscribeError","unsubscribeProgress","createCleanupHandler","getPayResult","getPayError","getIsPaymentInProgress","unsubscribeFunctions","baseETH","baseUSDC","baseSepoliaETH"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}